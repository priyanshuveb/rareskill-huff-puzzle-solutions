
/** 
 *  MAX_OF_ARRAY HUFF EXERCISE
 *  
 *  In this task, Given an abi encoded array of uint256, return its maximum value. Revert if the array is empty.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

/*
function maxOfArray(uint256[] memory arr) payable public returns(uitn256) {
    uint256 max = 0;
    for(uint i = 0; i < arr.length; i++){
    num = arr[i];
    if(num > max) {
        max = num;
    }
    }
    return max;
}
*/

#define function maxOfArray(uint256[]) payable returns(uint256)

#define macro MAX_OF_ARRAY() = takes(0) returns(0) {
 
    0x04 calldataload           // [offset_increment]
    0x04 0x20 add calldataload  // [arr_size]
    dup1                        // [arr_size, arr_size, offset_increment]
    iszero                      // [arr_size == 0, arr_size, offset_increment]
    emptyArray                  // [emptyArray, arr_size == 0, arr_size, offset_increment]
    jumpi                       // [arr_size, offset_increment]
    0x00 0x00                   // [i, max_val, arr_size, offset_increment]
    loop1                       // [loop1, i, max_val, arr_size, offset_increment]
    jump                        // [i, max_val, arr_size, offset_increment]

    // revert if array is empty
    emptyArray:
        0x00 0x00 revert

    loop1:
        dup3                        // [arr_size, i, max_val, arr_size, offset_increment]
        dup2                        // [i, arr_size, i, max_val, arr_size, offset_increment]
        lt                          // [i < arr_size, i, max_val, arr_size, offset_increment]
        loop2                       // [loop2, i < arr_size, i, max_val, arr_size, offset_increment]
        jumpi                       // [i, max_val, arr_size, offset_increment]
        dup2                        // [max_val, i, max_val, arr_size, offset_increment]
        // return the array max value when array exhausts
        0x00 mstore 0x20 0x00 return

    loop2:
        0x44                // [0x44, i, max_val, arr_size, offset_increment]
        dup2                // [i, 0x44, i, max_val, arr_size, offset_increment]
        dup6                // [offset_increment, i, 0x44, i, max_val, arr_size, offset_increment]
        mul                 // [offset_increment * i, 0x44, i, max_val, arr_size, offset_increment]
        add                 // [arr_val_offset, i, max_val, arr_size, offset_increment]
        calldataload        // [arr_val, i, max_val, arr_size, offset_increment]
        dup1                // [arr_val, arr_val, i, max_val, arr_size, offset_increment]
        dup4                // [max_val, arr_val, arr_val, i, max_val, arr_size, offset_increment]
        gt                  // [max_val > arr_val, arr_val, i, max_val, arr_size, offset_increment]
        loop3               // [loop3, max_val > arr_val, arr_val, i, max_val, arr_size, offset_increment]
        jumpi               // [arr_val, i, max_val, arr_size, offset_increment]
        // assigning the arr value to the max value, since arr_val > max_val
        swap2               // [max_val, i, arr_val, arr_size, offset_increment]
        pop                 // [i, arr_val, arr_size, offset_increment]
        // incrementing i by 1
        0x01 add            // [1 + i, arr_val, arr_size, offset_increment]
        loop1               // [loop1, i, arr_val, arr_size, offset_increment]
        jump                // [i, arr_val, arr_size, offset_increment]
    
    loop3:
        pop         // [i, max_val, arr_size, offset_increment]
        // incrementing i by 1
        0x01 add    // [i + 1, max_val, arr_size, offset_increment]
        loop1       // [loop1, i + 1, max_val, arr_size, offset_increment]
        jump

}

#define macro MAIN() = takes(0) returns(0) {
   0x00 calldataload 0xe0 shr               // [func_selector]
   __FUNC_SIG(maxOfArray)                   // [func_selector1, func_selector]
   eq maxOfArray jumpi 0x00 0x00 revert

   maxOfArray:
        MAX_OF_ARRAY()
}