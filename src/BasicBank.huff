/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

// The following huff problem takes inspiration from two already solved problems seperately
// i.e. `SendEther.huff` and `Donations.huff`. For any explanation of the code below
// you can refer these two files
#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr
    dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi
    __FUNC_SIG(withdraw) eq withdraw jumpi
    handle_sent_eth jump

    balanceOf:
        0x04 calldataload 0x00 mstore
        0x20 0x00 sha3
        sload
        0x00 mstore
        0x20 0x00 return

    withdraw:
        caller 0x00 mstore
        0x20 0x00 sha3      // [slot]
        dup1 sload          // [slot_value, slot]
        dup1 0x04 calldataload dup1 // [param, param, slot_value, slot_value, slot]
        swap2                       // [slot_value, param, param, slot_value, slot]
        lt                          // [slot_value < param?, param, slot_value, slot]
        handle_revert               // [handle_revert, slot_value < param?, param, slot_value, slot]
        jumpi                       // [param, slot_value, slot]
        swap1                       // [slot_value, param, slot]
        sub                         // [final_value, slot]
        swap1                       // [slot, final_value]
        sstore                      // []
        // Sending the withdrawn ether back to the msg.sender, you can refer to ./src/SendEther.huff
        // for detailed explanation
        0x00 0x00 0x00 0x00 
        0x04 calldataload caller gas
        call
        0x00 0x00 return

    handle_revert:
        0x00 0x00 revert

    handle_sent_eth:
        caller
        0x00 mstore
        0x20 0x00 sha3
        dup1
        sload
        callvalue add
        swap1
        sstore
        0x00 0x00 return
    
}
