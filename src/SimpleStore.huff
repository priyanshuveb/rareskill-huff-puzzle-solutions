
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)

#define macro STORE() = takes(0) returns(0){
    0x04 calldataload                   // [calldata_first_parameter]
    0x00                                // [0x00, calldata_first_parameter]
    sstore                              // []                   // Storage: [0x00: value]
    0x00 0x00 return                    // []
}
#define macro READ() = takes(0) returns(0){
    0x00
    sload
    0x00
    mstore
    0x20 0x00 return
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr                  // [func_selector]
    dup1                                        // [func_selector, func_selector]
    __FUNC_SIG(store)                           // [store_sig, func_selector, func_selector]
    eq                                          // [store_sig == func_selector, func_selector]
    jump_store                                  // [jump-store, store_sig == func_selector, func_selector]
    jumpi                                       // [func_selector]
    __FUNC_SIG(read)
    eq
    jump_read
    jumpi
    //  revert if no function matches
    0x00 0x00 revert


    jump_store:
        STORE()
    jump_read:
        READ()                
}