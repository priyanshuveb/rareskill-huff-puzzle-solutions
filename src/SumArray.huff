
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

// -----------------------------------------------------------

// Array in calldata has 3 parts: offset + array size + array values
// offset: represents the position at which the dynamic data (array) will start after the function selector
// array size: the size of the array
// array values: all the array values appended sequentially

// -----------------------------------------------------------

/*
uint sum = 0;
for(uint i = 0; i < array.length; i++) {
    sum += array[i];
}
*/

#define function sumArray(uint256[]) payable returns(uint256)
#define macro SUM_ARRAY() = takes(0) returns(0) {
    0x04 calldataload                   // [offset]
    dup1 0x04 add calldataload          // [arr_size, offset]
    // initialising `i` and `sum` variables
    0x00                                // [sum, arr_size, offset]
    0x00                                // [i, sum, arr_size, offset]
    loop1
    jump

   // check if i < array.length
    loop1:
        dup3                // [arr_size, i, sum, arr_size, offset] 
        dup2                // [i, arr_size, i, sum, arr_size,offset] 
        lt                  // [i < arr_size?, i, sum, arr_size, offset]
        loop2               // [loop2, i < arr_size?, i, sum, arr_size, offset]
        jumpi               // [i, sum, arr_size, offset]
       // return sum
        swap1
        0x00 mstore 0x20 0x00 return

    // iterating over the array and calculating the sum
    loop2:
 
        dup1                // [i, i, sum, arr_size, offset]
        0x20 mul            // [i * 0x20, i, sum, arr_size, offset]
        0x24 add            // [i * 0x20 + 0x24, i, sum, arr_size, offset]
        dup5 add            // [i * 0x20 + 0x24 + offset, i, sum, arr_size, offset]
        calldataload        // [input_param, i, sum, arr_size, offset]
        dup3                // [sum, input_param, i, sum, arr_size, offset]
        add                 // [new_sum, i, sum, arr_size, offset]
        swap2               // [sum, i, new_sum, arr_size, offset]
        pop                 // [i, new_sum, arr_size, offset]
        // increment i value by 1
        0x01                // [0x01, i, new_sum, arr_size, offset]
        add                 // [1+ i, new_sum, arr_size, offset]
        loop1               // [loop1, 1+ i, new_sum, arr_size, offset]
        jump                // [1+ i, new_sum, arr_size, offset]

}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    __FUNC_SIG(sumArray)
    eq sumArray jumpi 0x00 0x00 revert

    sumArray:
        SUM_ARRAY()
}