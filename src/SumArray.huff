
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

// Array in calldata has 3 parts: offset + array size + array values
// offset: represents the bytes to jump from one array value to another
// array size: the size of the array
// array values: all the array values appended sequentially

/*
uint sum = 0;
for(uint i = 0; i < array.length; i++) {
    sum += array[i];
}

array.length = 0x24 calldataload 
how much i will increment per iteration = 0x04 calldataload
array input values size = calldatasize - 68 bytes(2 bytes for func_selector, 32 bytes for offset, 32 bytes for array) // 68bytes = 0x44 in hex
*/

// Note: there is redundant dup1 at the starting of the macro SUM_ARRAY which duplicates arr_size, it is of no significance
#define function sumArray(uint256[]) payable returns(uint256)
#define macro SUM_ARRAY() = takes(0) returns(0) {
    0x04 calldataload                   // [offset_increment]
    0x24 calldataload                   // [arr_size, offset_increment]
    dup1                                // [arr_size, arr_size, offset_increment]
    0x00                                // [sum, arr_size, arr_size, offset_increment]
    0x00                                // [i, sum, arr_size, arr_size, offset_increment]
    loop1
    jump
   
    loop1:
        dup3                // [arr_size, i, sum, arr_size, arr_size, offset_increment] 
        dup2                // [i, arr_size, i, sum, arr_size, arr_size,offset_increment] 
        lt                  // [i < arr_size?, i, sum, arr_size, arr_size, offset_increment]
        loop2               // [loop2, i < arr_size?, i, sum, arr_size, arr_size, offset_increment]
        jumpi               // [i, sum, arr_size, arr_size, offset_increment]
       // return sum
        swap1
        0x00 mstore 0x20 0x00 return

    loop2:
        dup1                // [i, i, sum, arr_size, arr_size, offset_increment]
        dup6                // [offset_inc, i, i, sum, arr_size, arr_size, offset_increment]
        mul                 // [offset_inc * i, i, sum, arr_size, arr_size, offset_increment]
        0x44                // [0x44, offset_inc * i, i, sum, arr_size, arr_size, offset_increment]
        add                // [0x44 + offset_inc * i, i, sum, arr_size, arr_size, offset_increment]
        calldataload        // [input_param, i, sum, arr_size, arr_size, offset_increment]
        dup3                // [sum, input_param, i, sum, arr_size, arr_size, offset_increment]
        add                 // [new_sum, i, sum, arr_size, arr_size, offset_increment]
        swap2               // [sum, i, new_sum, arr_size, arr_size, offset_increment]
        pop                 // [i, new_sum, arr_size, arr_size, offset_increment]
        // increment i value by 1
        0x01                // [0x01, i, new_sum, arr_size, arr_size, offset_increment]
        add                 // [1+ i, new_sum, arr_size, arr_size, offset_increment]
        loop1               // [loop1, 1+ i, new_sum, arr_size, arr_size, offset_increment]
        jump                // [1+ i, new_sum, arr_size, arr_size, offset_increment]

}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    __FUNC_SIG(sumArray)
    eq sumArray jumpi 0x00 0x00 revert

    sumArray:
        SUM_ARRAY()
}