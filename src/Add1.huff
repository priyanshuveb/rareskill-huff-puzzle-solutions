
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)

#define macro ADD1() = takes(0) returns(0) {
    0x04
    calldataload            // [calldata - func_selector]
    0x01                    // [0x01]
    add                     // [calldata_value + 1]
    0x00                    // [0x00, new_value]
    mstore                  // []                       // Memory: [0x00: new_value]

    0x20 0x00 return

}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr                  // [func_selector]
    __FUNC_SIG(add1)                            // [add1, func_selector]
    eq                                          // [add1 == func_selector]
    add1                                        // [ADD1, true/false]
    jumpi                                       // []
    // revert if no function matches
    0x00 0x00 revert

    add1:
        ADD1()
}